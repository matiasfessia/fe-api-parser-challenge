{"ast":null,"code":"import _slicedToArray from \"/home/mfessia/fe-api-parser-challenge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _regeneratorRuntime from \"/home/mfessia/fe-api-parser-challenge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/mfessia/fe-api-parser-challenge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _jsxFileName = \"/home/mfessia/fe-api-parser-challenge/src/App.js\",\n  _this = this,\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { Exception } from 'sass';\nimport './App.scss';\nimport Species from './Species';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar API_URL = 'https://swapi.dev/api/films/';\nvar SPECIES_IMAGES = {\n  droid: 'https://static.wikia.nocookie.net/starwars/images/f/fb/Droid_Trio_TLJ_alt.png',\n  human: 'https://static.wikia.nocookie.net/starwars/images/3/3f/HumansInTheResistance-TROS.jpg',\n  trandoshan: 'https://static.wikia.nocookie.net/starwars/images/7/72/Bossk_full_body.png',\n  wookie: 'https://static.wikia.nocookie.net/starwars/images/1/1e/Chewbacca-Fathead.png',\n  yoda: 'https://static.wikia.nocookie.net/starwars/images/d/d6/Yoda_SWSB.png'\n};\n\n/**\n * This map is used to match the species names with the names of the SPECIES_IMAGES constants.\n * I could change directly the name of \"yoda\" to \"Yoda's species\" but I wanted to keep SPECIES_IMAGES as it was since\n * it could represent the result from another API for getting the images.\n */\nvar MAP_IMAGES = {\n  Droid: SPECIES_IMAGES.droid,\n  Human: SPECIES_IMAGES.human,\n  Trandoshan: SPECIES_IMAGES.trandoshan,\n  Wookie: SPECIES_IMAGES.wookie,\n  \"Yoda's species\": SPECIES_IMAGES.yoda\n};\n\n// const CM_TO_IN_CONVERSION_RATIO = 2.54; This convertion ratio for cm to in was wrong.\nvar CM_TO_IN_CONVERSION_RATIO = 0.3937;\n\n/**\n * Takes a film Id, fetches in the API and returns the film object from the API.\n */\nvar getFilm = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(id) {\n    var response;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (id) {\n            _context.next = 2;\n            break;\n          }\n          return _context.abrupt(\"return\", undefined);\n        case 2:\n          _context.prev = 2;\n          _context.next = 5;\n          return fetch(\"\".concat(API_URL, \"/\").concat(id));\n        case 5:\n          response = _context.sent;\n          _context.next = 8;\n          return response.json();\n        case 8:\n          return _context.abrupt(\"return\", _context.sent);\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](2);\n          console.log('There was an error fetching the film.', _context.t0);\n          return _context.abrupt(\"return\", undefined);\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[2, 11]]);\n  }));\n  return function getFilm(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n/**\n * Takes a film Id, fetches the film in the API, and for each species it fetches in the API.\n * Returns an array of species objects from the film.\n */\nvar getSpeciesFromFilm = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(filmId) {\n    var _yield$getFilm, species, fetchSpecies, responses, payloadResponses;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          if (filmId) {\n            _context3.next = 2;\n            break;\n          }\n          return _context3.abrupt(\"return\", undefined);\n        case 2:\n          _context3.next = 4;\n          return getFilm(filmId);\n        case 4:\n          _yield$getFilm = _context3.sent;\n          species = _yield$getFilm.species;\n          fetchSpecies = species.map(function (species) {\n            return new Promise(function (resolve) {\n              return resolve(fetch(species));\n            });\n          });\n          _context3.prev = 7;\n          _context3.next = 10;\n          return Promise.all(fetchSpecies);\n        case 10:\n          responses = _context3.sent;\n          payloadResponses = responses.map( /*#__PURE__*/function () {\n            var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(response) {\n              return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                while (1) switch (_context2.prev = _context2.next) {\n                  case 0:\n                    _context2.next = 2;\n                    return response.json();\n                  case 2:\n                    return _context2.abrupt(\"return\", _context2.sent);\n                  case 3:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }, _callee2);\n            }));\n            return function (_x3) {\n              return _ref3.apply(this, arguments);\n            };\n          }());\n          throw new Exception();\n        case 15:\n          return _context3.abrupt(\"return\", _context3.sent);\n        case 18:\n          _context3.prev = 18;\n          _context3.t0 = _context3[\"catch\"](7);\n          console.log(\"There were one or more than one species that couldn't be fetched.\", _context3.t0);\n          return _context3.abrupt(\"return\", undefined);\n        case 22:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3, null, [[7, 18]]);\n  }));\n  return function getSpeciesFromFilm(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\n/**\n * Takes a height in cm represented into a string (first param), and returns the height expresed in inches as a string.\n * Additionally, the second param represents how many decimals will contain the height in inches.\n * Returns \"n/a\" as result if the first param can not be converted to a number.\n */\nvar convertHeight = function convertHeight(heightInCm) {\n  var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var value = Number(heightInCm);\n  if (isNaN(value)) {\n    return 'n/a';\n  }\n  return \"\".concat((heightInCm * CM_TO_IN_CONVERSION_RATIO).toFixed(decimals), \"\\\"\");\n};\nvar App = function App() {\n  _s();\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    species = _useState2[0],\n    setSpecies = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isFetching = _useState4[0],\n    setIsFetching = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    somethingWentWrong = _useState6[0],\n    setSomethingWentWrong = _useState6[1];\n  useEffect(function () {\n    setIsFetching(true);\n    getSpeciesFromFilm(2).then(function (species) {\n      setIsFetching(false);\n      console.log('species >>>>>>>>', species);\n      setSpecies(species);\n    }).catch(function (error) {\n      setIsFetching(false);\n      setSomethingWentWrong(true);\n      console.log('Something went wrong.', error);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Empire Strikes Back - Species Listing\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, _this), isFetching && /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Fetching results... \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 22\n    }, _this), somethingWentWrong && /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Ups! Something went wrong. Please try again later. \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App-species\",\n      children: species && species.map(function (species) {\n        return /*#__PURE__*/_jsxDEV(Species, {\n          name: species.name || 'n/a',\n          classification: species.classification || 'n/a',\n          designation: species.designation || 'n/a',\n          height: convertHeight(species.average_height),\n          image: MAP_IMAGES[species.name],\n          numFilms: Array.isArray(species.films) ? species.films.length : 0,\n          language: species.language || 'n/a'\n        }, species.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, _this);\n};\n_s(App, \"PzPjhgyZsJBqy5dKmxxHLRa76KU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","Exception","Species","API_URL","SPECIES_IMAGES","droid","human","trandoshan","wookie","yoda","MAP_IMAGES","Droid","Human","Trandoshan","Wookie","CM_TO_IN_CONVERSION_RATIO","getFilm","id","undefined","fetch","response","json","console","log","getSpeciesFromFilm","filmId","species","fetchSpecies","map","Promise","resolve","all","responses","payloadResponses","convertHeight","heightInCm","decimals","value","Number","isNaN","toFixed","App","setSpecies","isFetching","setIsFetching","somethingWentWrong","setSomethingWentWrong","then","catch","error","name","classification","designation","average_height","Array","isArray","films","length","language"],"sources":["/home/mfessia/fe-api-parser-challenge/src/App.js"],"sourcesContent":["import {useEffect, useState} from 'react';\nimport {Exception} from 'sass';\nimport './App.scss';\nimport Species from './Species';\n\nconst API_URL = 'https://swapi.dev/api/films/';\nconst SPECIES_IMAGES = {\n  droid:\n    'https://static.wikia.nocookie.net/starwars/images/f/fb/Droid_Trio_TLJ_alt.png',\n  human:\n    'https://static.wikia.nocookie.net/starwars/images/3/3f/HumansInTheResistance-TROS.jpg',\n  trandoshan:\n    'https://static.wikia.nocookie.net/starwars/images/7/72/Bossk_full_body.png',\n  wookie:\n    'https://static.wikia.nocookie.net/starwars/images/1/1e/Chewbacca-Fathead.png',\n  yoda: 'https://static.wikia.nocookie.net/starwars/images/d/d6/Yoda_SWSB.png',\n};\n\n/**\n * This map is used to match the species names with the names of the SPECIES_IMAGES constants.\n * I could change directly the name of \"yoda\" to \"Yoda's species\" but I wanted to keep SPECIES_IMAGES as it was since\n * it could represent the result from another API for getting the images.\n */\nconst MAP_IMAGES = {\n  Droid: SPECIES_IMAGES.droid,\n  Human: SPECIES_IMAGES.human,\n  Trandoshan: SPECIES_IMAGES.trandoshan,\n  Wookie: SPECIES_IMAGES.wookie,\n  \"Yoda's species\": SPECIES_IMAGES.yoda,\n};\n\n// const CM_TO_IN_CONVERSION_RATIO = 2.54; This convertion ratio for cm to in was wrong.\nconst CM_TO_IN_CONVERSION_RATIO = 0.3937;\n\n/**\n * Takes a film Id, fetches in the API and returns the film object from the API.\n */\nconst getFilm = async id => {\n  if (!id) {\n    return undefined;\n  }\n\n  try {\n    const response = await fetch(`${API_URL}/${id}`);\n    return await response.json();\n  } catch (error) {\n    console.log('There was an error fetching the film.', error);\n    return undefined;\n  }\n};\n\n/**\n * Takes a film Id, fetches the film in the API, and for each species it fetches in the API.\n * Returns an array of species objects from the film.\n */\nconst getSpeciesFromFilm = async filmId => {\n  if (!filmId) {\n    return undefined;\n  }\n\n  const {species} = await getFilm(filmId);\n  const fetchSpecies = species.map(\n    species => new Promise(resolve => resolve(fetch(species)))\n  );\n\n  try {\n    const responses = await Promise.all(fetchSpecies);\n    const payloadResponses = responses.map(\n      async response => await response.json()\n    );\n    throw new Exception();\n\n    return await Promise.all(payloadResponses);\n  } catch (error) {\n    console.log(\n      \"There were one or more than one species that couldn't be fetched.\",\n      error\n    );\n    return undefined;\n  }\n};\n\n/**\n * Takes a height in cm represented into a string (first param), and returns the height expresed in inches as a string.\n * Additionally, the second param represents how many decimals will contain the height in inches.\n * Returns \"n/a\" as result if the first param can not be converted to a number.\n */\nconst convertHeight = (heightInCm, decimals = 0) => {\n  const value = Number(heightInCm);\n  if (isNaN(value)) {\n    return 'n/a';\n  }\n  return `${(heightInCm * CM_TO_IN_CONVERSION_RATIO).toFixed(decimals)}\"`;\n};\n\nconst App = () => {\n  const [species, setSpecies] = useState([]);\n  const [isFetching, setIsFetching] = useState(false);\n  const [somethingWentWrong, setSomethingWentWrong] = useState(false);\n\n  useEffect(() => {\n    setIsFetching(true);\n    getSpeciesFromFilm(2)\n      .then(species => {\n        setIsFetching(false);\n        console.log('species >>>>>>>>', species);\n        setSpecies(species);\n      })\n      .catch(error => {\n        setIsFetching(false);\n        setSomethingWentWrong(true);\n        console.log('Something went wrong.', error);\n      });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Empire Strikes Back - Species Listing</h1>\n      {isFetching && <h3>Fetching results... </h3>}\n      {somethingWentWrong && (\n        <h3>Ups! Something went wrong. Please try again later. </h3>\n      )}\n      <div className=\"App-species\">\n        {species &&\n          species.map(species => (\n            <Species\n              key={species.name}\n              name={species.name || 'n/a'}\n              classification={species.classification || 'n/a'}\n              designation={species.designation || 'n/a'}\n              height={convertHeight(species.average_height)}\n              image={MAP_IMAGES[species.name]}\n              numFilms={Array.isArray(species.films) ? species.films.length : 0}\n              language={species.language || 'n/a'}\n            />\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}